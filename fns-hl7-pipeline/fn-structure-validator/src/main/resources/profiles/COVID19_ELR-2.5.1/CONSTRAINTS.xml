<ConformanceContext xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/Jungyubw/NIST_healthcare_hl7_v2_profile_schema/master/Schema/NIST%20Validation%20Schema/ConformanceContext.xsd" UUID="57450d0dd4c6f57e694d1e88"><MetaData Name="COVID19_ELR v2.5.1" OrgName="APHL" Version="No Version Info" Date="No Date Info" /><Predicates><Datatype><ByID ID="XON_ELR"><Predicate ID="CP_1[1]_0" Target="1[1]" TrueUsage="R" FalseUsage="RE"><Description>If XON.10 (Organization Identifier) is not valued</Description><Condition><NOT><AND><Presence Path="10[1]" /><Presence Path="10[1]" /></AND></NOT></Condition></Predicate></ByID></Datatype><Segment><ByID ID="OBX_ELR"><Predicate ID="undefined-6" Target="6[1]" TrueUsage="RE" FalseUsage="O"><Description>[[If the value of OBX-2 is 'NM'.] OR [If the value of OBX-2 is 'SN'.]] AND [If the value of OBX-11 is not 'X'.]</Description><Condition><AND><OR><AND><Presence Path="2[1]" /><PlainText Path="2[1]" Text="NM" IgnoreCase="false" /></AND><AND><Presence Path="2[1]" /><PlainText Path="2[1]" Text="SN" IgnoreCase="true" /></AND></OR><NOT><AND><Presence Path="11[1]" /><PlainText Path="11[1]" Text="X" IgnoreCase="true" /></AND></NOT></AND></Condition></Predicate><Predicate ID="CP_5[1]_0" Target="5[1]" TrueUsage="RE" FalseUsage="O"><Description>If the value of OBX-11 is not 'X'.</Description><Condition><NOT><AND><Presence Path="11[1]" /><PlainText Path="11[1]" Text="X" IgnoreCase="false" /></AND></NOT></Condition></Predicate><Predicate ID="CP_2[1]_0" Target="2[1]" TrueUsage="R" FalseUsage="O"><Description>If OBX-5 is valued</Description><Condition><AND><Presence Path="5[1]" /><Presence Path="5[1]" /></AND></Condition></Predicate></ByID></Segment><Group><ByID ID="5d1a220684ae07947e946d3c"><Predicate ID="CP_NOT Assigned_0" Target="9[1].1[1].2[1]" TrueUsage="R" FalseUsage="O"><Description>If OBR.3 (Filler Order Number) is not valued</Description><Condition><NOT><AND><Presence Path="2[1].3[1]" /><Presence Path="2[1].3[1]" /></AND></NOT></Condition></Predicate></ByID></Group><Message /></Predicates><Constraints><Datatype><ByID ID="DTM"><Constraint ID="DTM_Year_USAGE(R)" Target="."><Description>Year usage is 'R'.</Description><Assertion><Format Path="." Regex="([0-9]{4})(((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?)?((\+|\-)[0-9]{4})?" /></Assertion></Constraint><Constraint ID="DTM_Day_USAGE(C)" Target="."><Description>Day usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Month) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Hour_USAGE(C)" Target="."><Description>Hour usage is 'C'.False Usage is 'X'. Predicate is 'If DD(Day) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Minute_USAGE(C)" Target="."><Description>Minute usage is 'C'.False Usage is 'X'. Predicate is 'If HH(Hour) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Second_USAGE(C)" Target="."><Description>Second usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Minute) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/10 second_USAGE(C)" Target="."><Description>1/10 second usage is 'C'.False Usage is 'X'. Predicate is 'If SS(Second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])(\.[0-9]{1,4})?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/100 second_USAGE(C)" Target="."><Description>1/100 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/10 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9]([0-9]([0-9]([0-9])?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/1000 second_USAGE(C)" Target="."><Description>1/1000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/100 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9]([0-9]([0-9])?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/10000 second_USAGE(C)" Target="."><Description>1/10000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/1000 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9]([0-9])?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?([0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint></ByID><ByID ID="DTM_2-7"><Constraint ID="DTM_Year_USAGE(R)" Target="."><Description>Year usage is 'R'.</Description><Assertion><Format Path="." Regex="([0-9]{4})(((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?)?((\+|\-)[0-9]{4})?" /></Assertion></Constraint><Constraint ID="DTM_Day_USAGE(C)" Target="."><Description>Day usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Month) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Hour_USAGE(C)" Target="."><Description>Hour usage is 'C'.False Usage is 'X'. Predicate is 'If DD(Day) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Minute_USAGE(C)" Target="."><Description>Minute usage is 'C'.False Usage is 'X'. Predicate is 'If HH(Hour) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_Second_USAGE(C)" Target="."><Description>Second usage is 'C'.False Usage is 'X'. Predicate is 'If MM(Minute) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/10 second_USAGE(C)" Target="."><Description>1/10 second usage is 'C'.False Usage is 'X'. Predicate is 'If SS(Second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])(\.[0-9]{1,4})?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/100 second_USAGE(C)" Target="."><Description>1/100 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/10 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9]([0-9]([0-9]([0-9])?)?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/1000 second_USAGE(C)" Target="."><Description>1/1000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/100 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9]([0-9]([0-9])?)?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint><Constraint ID="DTM_1/10000 second_USAGE(C)" Target="."><Description>1/10000 second usage is 'C'.False Usage is 'X'. Predicate is 'If s(1/1000 second) is valued.'.</Description><Assertion><IMPLY><NOT><Format Path="." Regex="([0-9]{4})((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))(([0-1][0-9])|(2[0-3]))([0-5][0-9])([0-5][0-9])\.[0-9][0-9][0-9]([0-9])?((\+|\-)[0-9]{4})?" /></NOT><Format Path="." Regex="([0-9]{4})?((0[1-9])|(1[0-2]))?((0[1-9])|([1-2][0-9])|(3[0-1]))?(([0-1][0-9])|(2[0-3]))?([0-5][0-9])?([0-5][0-9])?(\.[0-9])?([0-9])?([0-9])?((\+|\-)[0-9]{4})?" /></IMPLY></Assertion></Constraint></ByID></Datatype><Segment><ByID ID="MSH_ELR"><Constraint ID="ELR-012"><Description>The value of MSH-1 SHALL be '|'.</Description><Assertion><PlainText Path="1[1]" Text="|" IgnoreCase="false" /></Assertion></Constraint><Constraint ID="ELR-015"><Description>The value of MSH-9.1 SHALL be 'ORU'.</Description><Assertion><PlainText Path="9[1].1[1]" Text="ORU" IgnoreCase="true" /></Assertion></Constraint><Constraint ID="ELR-016"><Description>The value of MSH-9.2 SHALL be 'R01'.</Description><Assertion><PlainText Path="9[1].2[1]" Text="R01" IgnoreCase="true" /></Assertion></Constraint><Constraint ID="ELR-017"><Description>The value of MSH-9.3 SHALL be 'ORU_R01'.</Description><Assertion><PlainText Path="9[1].3[1]" Text="ORU_R01" IgnoreCase="true" /></Assertion></Constraint></ByID><ByID ID="NK1_ELR"><Constraint ID="ELR-033"><Description>The value of NK1-1 SHALL be valued sequentially starting with the value '1'.</Description><Assertion><SetID Path="1[1]" /></Assertion></Constraint></ByID><ByID ID="PID_ELR"><Constraint ID="ELR-024"><Description>The value of PID-1 SHALL be '1'.</Description><Assertion><PlainText Path="1[1]" Text="1" IgnoreCase="false" /></Assertion></Constraint></ByID></Segment><Group /><Message /></Constraints></ConformanceContext>